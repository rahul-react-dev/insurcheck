/**
 * PDF Invoice Generation Service for InsurCheck
 * Generates professional PDF invoices using PDFMake
 */

import PdfPrinter from 'pdfmake';
import fs from 'fs';
import path from 'path';

// Import fonts for PDFMake
import pdfFonts from 'pdfmake/build/vfs_fonts.js';

// Define fonts for PDFMake - use system fonts
const fonts = {
  Helvetica: {
    normal: 'Helvetica',
    bold: 'Helvetica-Bold',
    italics: 'Helvetica-Oblique',
    bolditalics: 'Helvetica-BoldOblique'
  }
};

// Override the default font in all styles to use Helvetica instead of Roboto

const printer = new PdfPrinter(fonts);

/**
 * Generate PDF invoice from invoice data
 * @param {Object} invoiceData - Complete invoice data
 * @param {Object} tenantData - Tenant information
 * @returns {Promise<Buffer>} PDF buffer
 */
export async function generateInvoicePDF(invoiceData, tenantData) {
  try {
    console.log(`üìÑ Generating PDF for invoice: ${invoiceData.invoiceNumber}`);

    // Parse items if they're stored as JSON string
    const items = typeof invoiceData.items === 'string' 
      ? JSON.parse(invoiceData.items) 
      : invoiceData.items || [];

    // Create document definition
    const docDefinition = {
      pageSize: 'A4',
      pageMargins: [40, 60, 40, 60],
      
      // Header
      header: {
        margin: [40, 20, 40, 10],
        table: {
          widths: ['*', '*'],
          body: [[
            {
              text: 'INVOICE',
              style: 'header',
              alignment: 'left'
            },
            {
              text: 'InsurCheck Platform',
              style: 'companyName',
              alignment: 'right'
            }
          ]]
        },
        layout: 'noBorders'
      },

      // Footer
      footer: function(currentPage, pageCount) {
        return {
          margin: [40, 10],
          text: [
            'Generated by InsurCheck Platform ‚Ä¢ ',
            { text: 'Page ' + currentPage.toString() + ' of ' + pageCount, italics: true }
          ],
          style: 'footer',
          alignment: 'center'
        };
      },

      content: [
        // Invoice header information
        {
          columns: [
            {
              width: '50%',
              stack: [
                { text: 'Bill To:', style: 'sectionHeader', margin: [0, 0, 0, 5] },
                { text: tenantData.name || 'N/A', style: 'clientInfo' },
                { text: tenantData.email || 'N/A', style: 'clientInfo' },
                { text: tenantData.domain || 'N/A', style: 'clientInfo' }
              ]
            },
            {
              width: '50%',
              stack: [
                { text: 'Invoice Details', style: 'sectionHeader', margin: [0, 0, 0, 5] },
                {
                  table: {
                    widths: ['40%', '60%'],
                    body: [
                      ['Invoice #:', { text: invoiceData.invoiceNumber || 'N/A', bold: true }],
                      ['Issue Date:', formatDate(invoiceData.issueDate)],
                      ['Due Date:', formatDate(invoiceData.dueDate)],
                      ['Status:', { 
                        text: (invoiceData.status || 'Draft').toUpperCase(), 
                        color: getStatusColor(invoiceData.status),
                        bold: true 
                      }]
                    ]
                  },
                  layout: 'noBorders'
                }
              ]
            }
          ],
          margin: [0, 0, 0, 30]
        },

        // Billing period
        {
          text: `Billing Period: ${formatDate(invoiceData.billingPeriodStart)} - ${formatDate(invoiceData.billingPeriodEnd)}`,
          style: 'billingPeriod',
          margin: [0, 0, 0, 20]
        },

        // Items table
        {
          table: {
            headerRows: 1,
            widths: ['*', 'auto', 'auto', 'auto'],
            body: [
              // Header row
              [
                { text: 'Description', style: 'tableHeader' },
                { text: 'Qty', style: 'tableHeader', alignment: 'center' },
                { text: 'Unit Price', style: 'tableHeader', alignment: 'right' },
                { text: 'Total', style: 'tableHeader', alignment: 'right' }
              ],
              // Data rows
              ...items.map(item => [
                { text: item.description || 'N/A', style: 'tableCell' },
                { text: item.quantity?.toString() || '1', style: 'tableCell', alignment: 'center' },
                { text: formatCurrency(item.unitPrice), style: 'tableCell', alignment: 'right' },
                { text: formatCurrency(item.total), style: 'tableCell', alignment: 'right' }
              ])
            ]
          },
          layout: {
            fillColor: function (rowIndex, node, columnIndex) {
              return (rowIndex === 0) ? '#f8fafc' : null;
            },
            hLineWidth: function (i, node) {
              return (i === 0 || i === 1 || i === node.table.body.length) ? 1 : 0.5;
            },
            vLineWidth: function (i, node) {
              return (i === 0 || i === node.table.widths.length) ? 1 : 0.5;
            },
            hLineColor: '#e2e8f0',
            vLineColor: '#e2e8f0'
          },
          margin: [0, 0, 0, 20]
        },

        // Totals section
        {
          columns: [
            { width: '60%', text: '' }, // Spacer
            {
              width: '40%',
              table: {
                widths: ['60%', '40%'],
                body: [
                  ['Subtotal:', { text: formatCurrency(invoiceData.amount), alignment: 'right' }],
                  ['Tax:', { text: formatCurrency(invoiceData.taxAmount), alignment: 'right' }],
                  [
                    { text: 'Total:', bold: true, fontSize: 12 },
                    { text: formatCurrency(invoiceData.totalAmount), bold: true, fontSize: 12, alignment: 'right' }
                  ]
                ]
              },
              layout: {
                hLineWidth: function (i, node) {
                  return (i === node.table.body.length - 1) ? 2 : 0.5;
                },
                vLineWidth: function (i) {
                  return 0;
                },
                hLineColor: '#3b82f6'
              }
            }
          ]
        },

        // Payment information
        invoiceData.status === 'paid' && invoiceData.paidDate ? {
          margin: [0, 30, 0, 0],
          table: {
            widths: ['*'],
            body: [[
              {
                text: [
                  'Payment Information\n',
                  { text: `Paid on: ${formatDate(invoiceData.paidDate)}`, fontSize: 10 },
                  invoiceData.paymentMethod ? { text: `\nPayment Method: ${invoiceData.paymentMethod}`, fontSize: 10 } : '',
                  invoiceData.transactionId ? { text: `\nTransaction ID: ${invoiceData.transactionId}`, fontSize: 10 } : ''
                ],
                style: 'paymentInfo'
              }
            ]]
          },
          layout: {
            fillColor: '#f0f9ff',
            hLineColor: '#3b82f6',
            vLineColor: '#3b82f6'
          }
        } : null,

        // Terms and conditions
        {
          text: 'Terms & Conditions',
          style: 'sectionHeader',
          margin: [0, 30, 0, 10]
        },
        {
          text: [
            '‚Ä¢ Payment is due within 30 days of invoice date\n',
            '‚Ä¢ Late payments may incur additional charges\n',
            '‚Ä¢ For questions about this invoice, please contact our support team\n',
            '‚Ä¢ This invoice is generated electronically and is valid without signature'
          ],
          style: 'terms'
        }
      ].filter(Boolean), // Remove null elements

      // Styles
      defaultStyle: {
        font: 'Helvetica'
      },
      styles: {
        header: {
          fontSize: 24,
          bold: true,
          color: '#1f2937',
          font: 'Helvetica'
        },
        companyName: {
          fontSize: 16,
          bold: true,
          color: '#3b82f6',
          font: 'Helvetica'
        },
        sectionHeader: {
          fontSize: 14,
          bold: true,
          color: '#374151',
          margin: [0, 10, 0, 5],
          font: 'Helvetica'
        },
        clientInfo: {
          fontSize: 11,
          color: '#6b7280',
          margin: [0, 2],
          font: 'Helvetica'
        },
        billingPeriod: {
          fontSize: 12,
          bold: true,
          color: '#059669',
          alignment: 'center',
          font: 'Helvetica'
        },
        tableHeader: {
          fontSize: 11,
          bold: true,
          color: '#374151',
          margin: [5, 8],
          font: 'Helvetica'
        },
        tableCell: {
          fontSize: 10,
          color: '#4b5563',
          margin: [5, 5],
          font: 'Helvetica'
        },
        paymentInfo: {
          fontSize: 11,
          color: '#1d4ed8',
          margin: [10, 10],
          font: 'Helvetica'
        },
        terms: {
          fontSize: 9,
          color: '#6b7280',
          lineHeight: 1.3,
          font: 'Helvetica'
        },
        footer: {
          fontSize: 8,
          color: '#9ca3af',
          font: 'Helvetica'
        }
      }
    };

    // Generate PDF
    const pdfDoc = printer.createPdfKitDocument(docDefinition);
    
    // Convert to buffer
    return new Promise((resolve, reject) => {
      const chunks = [];
      
      pdfDoc.on('data', (chunk) => {
        chunks.push(chunk);
      });
      
      pdfDoc.on('end', () => {
        const pdfBuffer = Buffer.concat(chunks);
        console.log(`‚úÖ PDF generated successfully for invoice: ${invoiceData.invoiceNumber} (${pdfBuffer.length} bytes)`);
        resolve(pdfBuffer);
      });
      
      pdfDoc.on('error', (error) => {
        console.error(`‚ùå PDF generation error for invoice: ${invoiceData.invoiceNumber}:`, error);
        reject(error);
      });
      
      pdfDoc.end();
    });

  } catch (error) {
    console.error(`‚ùå PDF generation failed for invoice: ${invoiceData.invoiceNumber || 'Unknown'}:`, error);
    throw error;
  }
}

/**
 * Helper function to format dates
 * @param {Date|string} date - Date to format
 * @returns {string} Formatted date string
 */
function formatDate(date) {
  if (!date) return 'N/A';
  
  try {
    const d = new Date(date);
    return d.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  } catch (error) {
    return 'N/A';
  }
}

/**
 * Helper function to format currency
 * @param {number|string} amount - Amount to format
 * @returns {string} Formatted currency string
 */
function formatCurrency(amount) {
  if (!amount && amount !== 0) return '$0.00';
  
  try {
    const num = typeof amount === 'string' ? parseFloat(amount) : amount;
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(num);
  } catch (error) {
    return '$0.00';
  }
}

/**
 * Helper function to get status color
 * @param {string} status - Invoice status
 * @returns {string} Color code for status
 */
function getStatusColor(status) {
  switch (status?.toLowerCase()) {
    case 'paid':
      return '#059669';
    case 'sent':
      return '#3b82f6';
    case 'overdue':
      return '#dc2626';
    case 'cancelled':
      return '#6b7280';
    case 'draft':
    default:
      return '#d97706';
  }
}

/**
 * Generate invoice filename
 * @param {Object} invoiceData - Invoice data
 * @param {Object} tenantData - Tenant data
 * @returns {string} Generated filename
 */
export function generateInvoiceFilename(invoiceData, tenantData) {
  const invoiceNumber = invoiceData.invoiceNumber || 'UNKNOWN';
  const tenantName = (tenantData.name || 'Unknown')
    .replace(/[^a-zA-Z0-9\s]/g, '') // Remove special characters
    .replace(/\s+/g, '_'); // Replace spaces with underscores
  
  return `Invoice_${invoiceNumber}_${tenantName}.pdf`;
}